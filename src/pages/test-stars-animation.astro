---
// Test page for Stars Animation Module
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Stars Animation Module Test</title>
    <style>
      /* 
        * CRITICAL FIX: CSS Variable Definition
        * 
        * ISSUE: Stars were not visible because the CSS variable --color-accent was undefined
        * SOLUTION: Added the missing CSS variable to provide the purple color for stars
        * 
        * FINDING: The stars animation module uses var(--color-accent) for star color,
        * but this variable wasn't defined in the test page, causing stars to be invisible
        * 
        * FIX APPLIED: Added --color-accent: #8b5dff; to :root
        */
      :root {
        --color-accent: #8b5dff;
      }

      body {
        margin: 0;
        padding: 20px;
        font-family: system-ui, sans-serif;
        background: #0a0a0a;
        color: white;
        min-height: 100vh;
      }
      .test-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        backdrop-filter: blur(10px);
      }
      .test-section {
        margin: 20px 0;
        padding: 15px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 5px;
      }
      button {
        background: #8b5dff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        margin: 5px;
      }
      button:hover {
        background: #7c4dff;
      }
      .status {
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
        font-family: monospace;
      }
      .status.success {
        background: rgba(0, 255, 0, 0.2);
        border: 1px solid rgba(0, 255, 0, 0.5);
      }
      .status.error {
        background: rgba(255, 0, 0, 0.2);
        border: 1px solid rgba(255, 0, 0, 0.5);
      }
      .status.info {
        background: rgba(0, 150, 255, 0.2);
        border: 1px solid rgba(0, 150, 255, 0.5);
      }
    </style>
  </head>
  <body>
    <div class="test-container">
      <h1>üåü Stars Animation Module Test</h1>

      <div class="test-section">
        <h2>Test Controls</h2>
        <button onclick="initDefaultStars()">Initialize Default Stars</button>
        <button onclick="initCustomStars()">Initialize Custom Stars</button>
        <button onclick="updateStarsConfig()">Update Configuration</button>
        <button onclick="destroyStars()">Destroy Stars</button>
        <button onclick="testPerformance()">Test Performance</button>
        <button onclick="testAccessibility()">Test Accessibility</button>
      </div>

      <div class="test-section">
        <h2>Status</h2>
        <div id="status" class="status info">Ready to test stars animation module</div>
      </div>

      <div class="test-section">
        <h2>Performance Metrics</h2>
        <div id="metrics" class="status info">No metrics available yet</div>
      </div>

      <div class="test-section">
        <h2>Configuration</h2>
        <pre id="config">No configuration loaded</pre>
      </div>
    </div>

    <script type="module">
      import {
        initStarsAnimation,
        StarsAnimationPerformanceMonitor,
      } from "/src/scripts/ui/background-animations/stars-animation.js"

      let starsAnimation = null
      let performanceMonitor = null

      // Update status display
      function updateStatus(message, type = "info") {
        const statusEl = document.getElementById("status")
        statusEl.textContent = message
        statusEl.className = `status ${type}`
      }

      // Update metrics display
      function updateMetrics(metrics) {
        const metricsEl = document.getElementById("metrics")
        metricsEl.innerHTML = `
        <strong>Performance Metrics:</strong><br>
        Initialization Time: ${metrics.initializationTime?.toFixed(2) || "N/A"}ms<br>
        Memory Usage: ${(metrics.memoryUsage / 1024 / 1024).toFixed(2) || "N/A"}MB<br>
        Average FPS: ${metrics.averageFPS?.toFixed(1) || "N/A"}fps<br>
        Error Count: ${metrics.errorCount || 0}<br>
        Retry Count: ${metrics.retryCount || 0}
      `
      }

      // Update configuration display
      function updateConfig(config) {
        const configEl = document.getElementById("config")
        configEl.textContent = JSON.stringify(config, null, 2)
      }

      // Initialize default stars
      window.initDefaultStars = function () {
        try {
          updateStatus("Initializing default stars animation...", "info")

          const defaultConfig = {
            accessibility: {
              respectReducedMotion: false, // Disable reduced motion check for testing
              forceEnable: true, // Force enable animation
            },
          }

          starsAnimation = initStarsAnimation(defaultConfig)
          performanceMonitor = new StarsAnimationPerformanceMonitor(starsAnimation)

          performanceMonitor.startMonitoring()
          starsAnimation.init("stars")
          performanceMonitor.endMonitoring()

          updateStatus("‚úÖ Default stars animation initialized successfully", "success")
          updateConfig(starsAnimation.config)
          updateMetrics(performanceMonitor.metrics)
        } catch (error) {
          updateStatus(`‚ùå Error initializing default stars: ${error.message}`, "error")
          console.error("Default stars initialization error:", error)
        }
      }

      // Initialize custom stars
      window.initCustomStars = function () {
        try {
          updateStatus("Initializing custom stars animation...", "info")

          const customConfig = {
            count: 16,
            animationDuration: "4s",
            opacity: 0.8,
            containerId: "custom-stars",
            createContainer: true,
            performance: {
              targetFPS: 45,
              autoReduceComplexity: true,
            },
            accessibility: {
              respectReducedMotion: false, // Disable reduced motion check for testing
              forceEnable: true, // Force enable animation
              announceChanges: true,
              highContrastSupport: true,
            },
          }

          starsAnimation = initStarsAnimation(customConfig)
          performanceMonitor = new StarsAnimationPerformanceMonitor(starsAnimation)

          performanceMonitor.startMonitoring()
          starsAnimation.init("custom-stars")
          performanceMonitor.endMonitoring()

          updateStatus("‚úÖ Custom stars animation initialized successfully", "success")
          updateConfig(starsAnimation.config)
          updateMetrics(performanceMonitor.metrics)
        } catch (error) {
          updateStatus(`‚ùå Error initializing custom stars: ${error.message}`, "error")
          console.error("Custom stars initialization error:", error)
        }
      }

      // Update stars configuration
      window.updateStarsConfig = function () {
        if (!starsAnimation) {
          updateStatus("‚ùå No stars animation to update", "error")
          return
        }

        try {
          updateStatus("Updating stars configuration...", "info")

          const newConfig = {
            count: 12,
            opacity: 0.9,
            animationDuration: "2.5s",
          }

          starsAnimation.updateConfig(newConfig)
          updateStatus("‚úÖ Stars configuration updated successfully", "success")
          updateConfig(starsAnimation.config)
        } catch (error) {
          updateStatus(`‚ùå Error updating configuration: ${error.message}`, "error")
          console.error("Configuration update error:", error)
        }
      }

      // Destroy stars
      window.destroyStars = function () {
        if (!starsAnimation) {
          updateStatus("‚ùå No stars animation to destroy", "error")
          return
        }

        try {
          updateStatus("Destroying stars animation...", "info")
          starsAnimation.destroy()
          starsAnimation = null
          performanceMonitor = null
          updateStatus("‚úÖ Stars animation destroyed successfully", "success")
          updateConfig("No configuration loaded")
          updateMetrics({})
        } catch (error) {
          updateStatus(`‚ùå Error destroying stars: ${error.message}`, "error")
          console.error("Stars destruction error:", error)
        }
      }

      // Test performance
      window.testPerformance = function () {
        if (!starsAnimation) {
          updateStatus("‚ùå No stars animation to test", "error")
          return
        }

        try {
          updateStatus("Testing performance...", "info")

          // Simulate performance monitoring
          setTimeout(() => {
            if (performanceMonitor) {
              performanceMonitor.endMonitoring()
              updateMetrics(performanceMonitor.metrics)
              updateStatus("‚úÖ Performance test completed", "success")
            }
          }, 2000)
        } catch (error) {
          updateStatus(`‚ùå Performance test error: ${error.message}`, "error")
          console.error("Performance test error:", error)
        }
      }

      // Test accessibility
      window.testAccessibility = function () {
        if (!starsAnimation) {
          updateStatus("‚ùå No stars animation to test", "error")
          return
        }

        try {
          updateStatus("Testing accessibility features...", "info")

          // Test reduced motion
          const reducedMotion = window.matchMedia(
            "(prefers-reduced-motion: reduce)"
          ).matches
          updateStatus(
            `‚úÖ Accessibility test completed. Reduced motion: ${reducedMotion}`,
            "success"
          )
        } catch (error) {
          updateStatus(`‚ùå Accessibility test error: ${error.message}`, "error")
          console.error("Accessibility test error:", error)
        }
      }

      // Initialize test page
      updateStatus("Stars Animation Module Test Page Loaded", "info")
      console.log("üåü Stars Animation Module Test Page Ready")
    </script>
  </body>
</html>
