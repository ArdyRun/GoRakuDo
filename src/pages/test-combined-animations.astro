---
// Test page for Combined Wave and Stars Animations
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Combined Animations Test - Wave + Stars</title>
    <style>
      :root {
        --color-accent: #8b5dff;
      }

      body {
        margin: 0;
        padding: 20px;
        font-family: system-ui, sans-serif;
        background: #0a0a0a;
        color: white;
        min-height: 100vh;
        overflow-x: hidden;
      }

      .test-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 10px;
        backdrop-filter: blur(5px);
        position: relative;
        z-index: 20;
        border: 1px solid rgba(255, 255, 255, 0.1);
      }

      .test-section {
        margin: 20px 0;
        padding: 15px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 5px;
      }

      .animation-canvas {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 5;
        pointer-events: none;
        display: block;
      }

      .controls-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 10px;
        margin: 15px 0;
      }

      button {
        background: #8b5dff;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 5px;
        cursor: pointer;
        margin: 5px;
        font-size: 14px;
        transition: background 0.3s ease;
      }

      button:hover {
        background: #7c4dff;
      }

      button:disabled {
        background: #666;
        cursor: not-allowed;
      }

      .status {
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
        font-family: monospace;
        font-size: 14px;
      }

      .status.success {
        background: rgba(0, 255, 0, 0.2);
        border: 1px solid rgba(0, 255, 0, 0.5);
      }

      .status.error {
        background: rgba(255, 0, 0, 0.2);
        border: 1px solid rgba(255, 0, 0, 0.5);
      }

      .status.info {
        background: rgba(0, 150, 255, 0.2);
        border: 1px solid rgba(0, 150, 255, 0.5);
      }

      .status.warning {
        background: rgba(255, 165, 0, 0.2);
        border: 1px solid rgba(255, 165, 0, 0.5);
      }

      .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 10px;
        margin: 10px 0;
      }

      .metric-card {
        background: rgba(255, 255, 255, 0.1);
        padding: 10px;
        border-radius: 5px;
        text-align: center;
      }

      .metric-value {
        font-size: 18px;
        font-weight: bold;
        color: #8b5dff;
      }

      .metric-label {
        font-size: 12px;
        opacity: 0.8;
      }

      .performance-chart {
        background: rgba(0, 0, 0, 0.3);
        border-radius: 5px;
        padding: 10px;
        margin: 10px 0;
        font-family: monospace;
        font-size: 12px;
        max-height: 200px;
        overflow-y: auto;
      }
    </style>
  </head>
  <body>
    <!-- Animation Canvas for Wave Animation -->
    <canvas id="waveCanvas" class="animation-canvas"></canvas>

    <div class="test-container">
      <h1>üåä‚ú® Combined Animations Test - Wave + Stars</h1>
      <p style="opacity: 0.8; margin-bottom: 20px;">
        <strong>Note:</strong> Container background is semi-transparent to allow wave animation
        visibility. Wave animation runs behind the interface at z-index: 5.
      </p>

      <div class="test-section">
        <h2>üéÆ Animation Controls</h2>
        <div class="controls-grid">
          <button onclick="initWaveAnimation()">Initialize Wave</button>
          <button onclick="initStarsAnimation()">Initialize Stars</button>
          <button onclick="initBothAnimations()">Initialize Both</button>
          <button onclick="destroyWaveAnimation()">Destroy Wave</button>
          <button onclick="destroyStarsAnimation()">Destroy Stars</button>
          <button onclick="destroyAllAnimations()">Destroy All</button>
        </div>

        <div class="controls-grid">
          <button onclick="testPerformance()">Test Performance</button>
          <button onclick="testMemoryUsage()">Test Memory</button>
          <button onclick="testAccessibility()">Test Accessibility</button>
          <button onclick="stressTest()">Stress Test</button>
          <button onclick="clearLogs()">Clear Logs</button>
        </div>
      </div>

      <div class="test-section">
        <h2>üìä Status & Performance</h2>
        <div id="status" class="status info">Ready to test combined animations</div>

        <div class="metrics-grid">
          <div class="metric-card">
            <div id="waveStatus" class="metric-value">‚ùå</div>
            <div class="metric-label">Wave Status</div>
          </div>
          <div class="metric-card">
            <div id="starsStatus" class="metric-value">‚ùå</div>
            <div class="metric-label">Stars Status</div>
          </div>
          <div class="metric-card">
            <div id="fpsValue" class="metric-value">0</div>
            <div class="metric-label">FPS</div>
          </div>
          <div class="metric-card">
            <div id="memoryValue" class="metric-value">0MB</div>
            <div class="metric-label">Memory</div>
          </div>
        </div>
      </div>

      <div class="test-section">
        <h2>üìà Performance Logs</h2>
        <div id="performanceLogs" class="performance-chart">
          No performance data yet...
        </div>
      </div>

      <div class="test-section">
        <h2>‚öôÔ∏è Configuration</h2>
        <pre id="config">No configuration loaded</pre>
      </div>
    </div>

    <script type="module">
      import { initStarsAnimation } from "/src/scripts/ui/background-animations/stars-animation.js"
      import { initWaveAnimation as initWaveModule } from "/src/scripts/ui/background-animations/wave-animation.js"
      import homepageConfig from "/src/scripts/ui/background-animations/configs/homepage-config.js"

      let waveAnimation = null
      let starsAnimation = null
      let performanceMonitor = null
      let fpsCounter = 0
      let lastFpsTime = 0

      // Update status display
      function updateStatus(message, type = "info") {
        const statusEl = document.getElementById("status")
        statusEl.textContent = message
        statusEl.className = `status ${type}`
      }

      // Update animation status indicators
      function updateAnimationStatus() {
        const waveStatus = document.getElementById("waveStatus")
        const starsStatus = document.getElementById("starsStatus")

        waveStatus.textContent = waveAnimation ? "‚úÖ" : "‚ùå"
        starsStatus.textContent = starsAnimation ? "‚úÖ" : "‚ùå"
      }

      // Update performance metrics
      function updatePerformanceMetrics() {
        const fpsEl = document.getElementById("fpsValue")
        const memoryEl = document.getElementById("memoryValue")

        // Calculate FPS
        const now = performance.now()
        fpsCounter++
        if (now - lastFpsTime >= 1000) {
          const fps = Math.round((fpsCounter * 1000) / (now - lastFpsTime))
          fpsEl.textContent = fps
          fpsCounter = 0
          lastFpsTime = now
        }

        // Memory usage
        if (performance.memory) {
          const memoryMB = (performance.memory.usedJSHeapSize / 1024 / 1024).toFixed(1)
          memoryEl.textContent = `${memoryMB}MB`
        }
      }

      // Add performance log
      function addPerformanceLog(message) {
        const logsEl = document.getElementById("performanceLogs")
        const timestamp = new Date().toLocaleTimeString()
        const logEntry = `[${timestamp}] ${message}\n`
        logsEl.textContent += logEntry
        logsEl.scrollTop = logsEl.scrollHeight
      }

      // Initialize wave animation
      window.initWaveAnimation = function () {
        try {
          updateStatus("Initializing wave animation...", "info")
          addPerformanceLog("Starting wave animation initialization")

          const canvas = document.getElementById("waveCanvas")

          // Force canvas to full window size
          canvas.width = window.innerWidth
          canvas.height = window.innerHeight

          // OPTIMIZATION: Use production wave colors for better performance testing
          const testWaveConfig = {
            ...homepageConfig.wave,
            performance: {
              ...homepageConfig.wave.performance,
              targetFPS: 60,
              quality: 3, // High quality for testing
              adaptiveStepSize: true,
            },
            waves: [
              {
                amplitude: 40,
                frequency: 0.01,
                speed: 0.02,
                offset: 0,
                color: "rgba(139, 93, 255, 0.6)", // Production purple
                y: 0.7,
              },
              {
                amplitude: 60,
                frequency: 0.008,
                speed: -0.015,
                offset: Math.PI / 3,
                color: "rgba(139, 93, 255, 0.5)", // Production purple
                y: 0.75,
              },
              {
                amplitude: 35,
                frequency: 0.012,
                speed: 0.025,
                offset: Math.PI / 2,
                color: "rgba(139, 93, 255, 0.4)", // Production purple
                y: 0.8,
              },
              {
                amplitude: 45,
                frequency: 0.009,
                speed: -0.018,
                offset: Math.PI,
                color: "rgba(139, 93, 255, 0.35)", // Production purple
                y: 0.85,
              },
            ],
          }

          // Test canvas drawing capability
          const ctx = canvas.getContext("2d")
          ctx.fillStyle = "rgba(255, 255, 255, 0.3)"
          ctx.fillRect(0, 0, canvas.width, canvas.height)

          // CRITICAL FIX: Use correct two-step initialization
          // Root Cause: initWaveModule() only accepts config, not (canvas, config)
          // Fix: Create instance first, then call init() separately
          // Additional fixes: Fixed step size (2px), disabled aggressive performance optimizations
          waveAnimation = initWaveModule(testWaveConfig)
          waveAnimation.init("waveCanvas")

          updateAnimationStatus()
          updateStatus("‚úÖ Wave animation initialized successfully", "success")
          addPerformanceLog("Wave animation initialized successfully")
        } catch (error) {
          updateStatus(`‚ùå Error initializing wave: ${error.message}`, "error")
          addPerformanceLog(`ERROR: Wave initialization failed - ${error.message}`)
        }
      }

      // Initialize stars animation
      window.initStarsAnimation = function () {
        try {
          updateStatus("Initializing stars animation...", "info")
          addPerformanceLog("Starting stars animation initialization")

          const starsConfig = {
            ...homepageConfig.stars,
            count: 20, // More stars for testing
            opacity: 1.0, // Full opacity for testing
            animationDuration: "2s", // Faster animation for testing
            accessibility: {
              ...homepageConfig.stars.accessibility,
              respectReducedMotion: false, // Force enable for testing
              forceEnable: true,
            },
          }

          starsAnimation = initStarsAnimation(starsConfig)
          starsAnimation.init("stars")

          updateAnimationStatus()
          updateStatus("‚úÖ Stars animation initialized successfully", "success")
          addPerformanceLog("Stars animation initialized successfully")
        } catch (error) {
          updateStatus(`‚ùå Error initializing stars: ${error.message}`, "error")
          addPerformanceLog(`ERROR: Stars initialization failed - ${error.message}`)
        }
      }

      // Initialize both animations
      window.initBothAnimations = function () {
        try {
          updateStatus("Initializing both animations...", "info")
          addPerformanceLog("Starting combined animation initialization")

          // Initialize wave first
          window.initWaveAnimation()

          // Small delay to ensure wave is ready
          setTimeout(() => {
            window.initStarsAnimation()
            updateStatus("‚úÖ Both animations initialized successfully", "success")
            addPerformanceLog("Both animations initialized successfully")
          }, 100)
        } catch (error) {
          updateStatus(`‚ùå Error initializing both: ${error.message}`, "error")
          addPerformanceLog(`ERROR: Combined initialization failed - ${error.message}`)
        }
      }

      // Destroy wave animation
      window.destroyWaveAnimation = function () {
        if (!waveAnimation) {
          updateStatus("‚ùå No wave animation to destroy", "error")
          return
        }

        try {
          updateStatus("Destroying wave animation...", "info")
          addPerformanceLog("Destroying wave animation")

          waveAnimation.destroy()
          waveAnimation = null

          updateAnimationStatus()
          updateStatus("‚úÖ Wave animation destroyed", "success")
          addPerformanceLog("Wave animation destroyed successfully")
        } catch (error) {
          updateStatus(`‚ùå Error destroying wave: ${error.message}`, "error")
          addPerformanceLog(`ERROR: Wave destruction failed - ${error.message}`)
        }
      }

      // Destroy stars animation
      window.destroyStarsAnimation = function () {
        if (!starsAnimation) {
          updateStatus("‚ùå No stars animation to destroy", "error")
          return
        }

        try {
          updateStatus("Destroying stars animation...", "info")
          addPerformanceLog("Destroying stars animation")

          starsAnimation.destroy()
          starsAnimation = null

          updateAnimationStatus()
          updateStatus("‚úÖ Stars animation destroyed", "success")
          addPerformanceLog("Stars animation destroyed successfully")
        } catch (error) {
          updateStatus(`‚ùå Error destroying stars: ${error.message}`, "error")
          addPerformanceLog(`ERROR: Stars destruction failed - ${error.message}`)
        }
      }

      // Destroy all animations
      window.destroyAllAnimations = function () {
        try {
          updateStatus("Destroying all animations...", "info")
          addPerformanceLog("Destroying all animations")

          window.destroyWaveAnimation()
          window.destroyStarsAnimation()

          updateStatus("‚úÖ All animations destroyed", "success")
          addPerformanceLog("All animations destroyed successfully")
        } catch (error) {
          updateStatus(`‚ùå Error destroying all: ${error.message}`, "error")
          addPerformanceLog(`ERROR: Destroy all failed - ${error.message}`)
        }
      }

      // Test performance
      window.testPerformance = function () {
        try {
          updateStatus("Testing performance...", "info")
          addPerformanceLog("Starting performance test")

          const startTime = performance.now()

          // Test initialization performance
          if (!waveAnimation) window.initWaveAnimation()
          if (!starsAnimation) window.initStarsAnimation()

          const endTime = performance.now()
          const initTime = endTime - startTime

          // Get wave animation performance status
          if (waveAnimation) {
            const perfStatus = waveAnimation.getPerformanceStatus()
            addPerformanceLog(`Wave Performance Status:`)
            addPerformanceLog(`  FPS: ${perfStatus.fps.toFixed(1)}`)
            addPerformanceLog(`  Step Size: ${perfStatus.stepSize}`)
            addPerformanceLog(`  Quality: ${perfStatus.quality}`)
            addPerformanceLog(`  Wave Count: ${perfStatus.waveCount}`)
            addPerformanceLog(`  Adaptive Step Size: ${perfStatus.adaptiveStepSize}`)
            addPerformanceLog(`  Strokes Enabled: ${perfStatus.enableStrokes}`)
          }

          addPerformanceLog(
            `Performance test completed - Init time: ${initTime.toFixed(2)}ms`
          )
          updateStatus(
            `‚úÖ Performance test completed - ${initTime.toFixed(2)}ms`,
            "success"
          )
        } catch (error) {
          updateStatus(`‚ùå Performance test error: ${error.message}`, "error")
          addPerformanceLog(`ERROR: Performance test failed - ${error.message}`)
        }
      }

      // Test memory usage
      window.testMemoryUsage = function () {
        try {
          updateStatus("Testing memory usage...", "info")
          addPerformanceLog("Starting memory usage test")

          if (performance.memory) {
            const used = performance.memory.usedJSHeapSize / 1024 / 1024
            const total = performance.memory.totalJSHeapSize / 1024 / 1024
            const limit = performance.memory.jsHeapSizeLimit / 1024 / 1024

            addPerformanceLog(
              `Memory usage - Used: ${used.toFixed(2)}MB, Total: ${total.toFixed(2)}MB, Limit: ${limit.toFixed(2)}MB`
            )
            updateStatus(
              `‚úÖ Memory test completed - ${used.toFixed(2)}MB used`,
              "success"
            )
          } else {
            addPerformanceLog("Memory API not available")
            updateStatus("‚ö†Ô∏è Memory API not available", "warning")
          }
        } catch (error) {
          updateStatus(`‚ùå Memory test error: ${error.message}`, "error")
          addPerformanceLog(`ERROR: Memory test failed - ${error.message}`)
        }
      }

      // Test accessibility
      window.testAccessibility = function () {
        try {
          updateStatus("Testing accessibility...", "info")
          addPerformanceLog("Starting accessibility test")

          const reducedMotion = window.matchMedia(
            "(prefers-reduced-motion: reduce)"
          ).matches
          const highContrast = window.matchMedia("(prefers-contrast: high)").matches

          addPerformanceLog(
            `Accessibility - Reduced motion: ${reducedMotion}, High contrast: ${highContrast}`
          )
          updateStatus(`‚úÖ Accessibility test completed`, "success")
        } catch (error) {
          updateStatus(`‚ùå Accessibility test error: ${error.message}`, "error")
          addPerformanceLog(`ERROR: Accessibility test failed - ${error.message}`)
        }
      }

      // Stress test
      window.stressTest = function () {
        try {
          updateStatus("Running stress test...", "info")
          addPerformanceLog("Starting stress test")

          let testCount = 0
          const maxTests = 5

          const runTest = () => {
            if (testCount >= maxTests) {
              updateStatus("‚úÖ Stress test completed", "success")
              addPerformanceLog("Stress test completed successfully")
              return
            }

            testCount++
            addPerformanceLog(`Stress test iteration ${testCount}/${maxTests}`)

            // Destroy and recreate animations
            window.destroyAllAnimations()

            setTimeout(() => {
              window.initBothAnimations()
              setTimeout(runTest, 1000)
            }, 500)
          }

          runTest()
        } catch (error) {
          updateStatus(`‚ùå Stress test error: ${error.message}`, "error")
          addPerformanceLog(`ERROR: Stress test failed - ${error.message}`)
        }
      }

      // Clear logs
      window.clearLogs = function () {
        document.getElementById("performanceLogs").textContent = "Logs cleared...\n"
        updateStatus("Logs cleared", "info")
      }

      // Update configuration display
      function updateConfig() {
        const configEl = document.getElementById("config")
        configEl.textContent = JSON.stringify(
          {
            wave: homepageConfig.wave,
            stars: homepageConfig.stars,
          },
          null,
          2
        )
      }

      // Performance monitoring loop
      function performanceLoop() {
        updatePerformanceMetrics()
        requestAnimationFrame(performanceLoop)
      }

      // Initialize test page
      updateStatus("Combined Animations Test Page Loaded", "info")
      updateConfig()
      performanceLoop()
      addPerformanceLog("Test page initialized")

      // Combined Animations Test Page Ready
    </script>
  </body>
</html>
