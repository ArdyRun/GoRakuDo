---
import Head from "../components/public-components/HeadSEO.astro"
import BaseLayout from "../layouts/BaseLayout.astro"
import Navbar from "../components/public-components/Navbar.vue"

// Import CSS
import "../styles/global.css"
import "../styles/tools/tools.css"

// Import images
import homepageOgImage from "../assets/images/Logo Discord.png"

// Tools data - structured for easy management and expansion
const tools = [
  {
    id: "anki",
    name: "Anki",
    description:
      "Sistem flashcard dengan Spaced Repetition System (SRS) untuk menghafal kosakata dan kanji secara efektif.",
    icon: "üìö",
    color: "var(--clr-accent)",
    link: "/docs/anki-guide",
    difficulty: "intermediate",
    category: "flashcard",
    featured: true,
  },
  {
    id: "yomichan",
    name: "Yomichan",
    description:
      "Browser extension untuk membaca bahasa Jepang dengan hover dictionary dan furigana generation.",
    icon: "üîç",
    color: "var(--clr-accent-dark)",
    link: "/docs/yomichan-guide",
    difficulty: "beginner",
    category: "reading",
    featured: true,
  },
  {
    id: "migaku",
    name: "Migaku",
    description:
      "Suite tools untuk immersion learning termasuk browser extension dan Anki integration.",
    icon: "üéØ",
    color: "var(--clr-accent-glow-strong)",
    link: "/docs/migaku-guide",
    difficulty: "intermediate",
    category: "suite",
    featured: false,
  },
  {
    id: "language-reactor",
    name: "Language Reactor",
    description:
      "Netflix extension untuk belajar bahasa dengan subtitle dual-language dan vocabulary tracking.",
    icon: "üé¨",
    color: "var(--clr-accent-glow-medium)",
    link: "/docs/language-reactor-guide",
    difficulty: "beginner",
    category: "video",
    featured: false,
  },
]
---

<!doctype html>
<html lang="id">
  <head>
    <Head
      title="Tools Immersion - Alat Pembelajaran Bahasa Jepang"
      description="Kumpulan tools dan aplikasi terbaik untuk pembelajaran bahasa Jepang dengan metode immersion. Setup dan panduan lengkap."
      ogImage={homepageOgImage}
      pageType="website"
      publishedDate="2025/08/10"
      lang="id"
      aiPageType="docs"
      enableAIOptimizations={true}
    />
    <!-- Prefetch critical resources -->
    <link fetchpriority="low" rel="prefetch" href="/docs" />
  </head>
  <body>
    <!-- Navigation -->
    <Navbar client:visible />

    <!-- Main Content -->
    <main class="main-content" role="main" transition:name="main-content">
      <!-- Hero Section -->
      <section
        class="tools-hero loading"
        aria-labelledby="tools-hero-title"
        transition:name="tools-hero">
        <div class="tools-hero-container">
          <h1
            class="tools-hero-title"
            id="tools-hero-title"
            transition:name="tools-hero-title">
            Tools Immersion
          </h1>
          <p class="tools-hero-description">
            Kumpulan tools dan aplikasi terbaik yang telah terbukti efektif untuk
            pembelajaran bahasa Jepang dengan metode immersion. Setiap tool dipilih
            berdasarkan pengalaman komunitas dan penelitian pembelajaran bahasa.
          </p>
        </div>
      </section>

      <!-- Tools Grid Section -->
      <section
        class="tools-section loading"
        aria-labelledby="tools-title"
        transition:name="tools-section"
        data-lazy>
        <div class="tools-container">
          <h2 class="tools-title" id="tools-title" transition:name="tools-title">
            Tools & Aplikasi
          </h2>
          <p class="tools-description">
            Pilih tool yang sesuai dengan tahap pembelajaran dan kebutuhan Anda. Setiap
            tool memiliki panduan setup dan strategi penggunaan yang lengkap.
          </p>

          <div class="tools-grid" role="list">
            {
              tools.map((tool, index) => (
                <article
                  class="tool-card"
                  role="listitem"
                  transition:name={`tool-card-${index + 1}`}
                  data-tool-id={tool.id}
                  data-difficulty={tool.difficulty}
                  data-category={tool.category}
                  tabindex="0">
                  <a
                    href={tool.link}
                    class="tool-card-link"
                    aria-label={`Buka panduan ${tool.name}`}>
                    <div
                      class="tool-icon"
                      aria-hidden="true"
                      style={`color: ${tool.color}`}>
                      {tool.icon}
                    </div>
                    <div class="tool-content">
                      <div class="tool-header">
                        <h3 class="tool-name">{tool.name}</h3>
                        <div class="tool-meta">
                          <span class="tool-difficulty" data-difficulty={tool.difficulty}>
                            {tool.difficulty === "beginner"
                              ? "Pemula"
                              : tool.difficulty === "intermediate"
                                ? "Menengah"
                                : "Lanjutan"}
                          </span>
                          <span class="tool-category">{tool.category}</span>
                        </div>
                      </div>
                      <p class="tool-description">{tool.description}</p>
                      <div class="tool-cta">
                        <span class="tool-cta-text">Lihat Panduan</span>
                        <div class="tool-arrow" aria-hidden="true">
                          <svg
                            width="20"
                            height="20"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round">
                            <path d="M5 12h14M12 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                    </div>
                  </a>
                </article>
              ))
            }
          </div>
        </div>
      </section>

      <!-- Getting Started Section -->
      <section
        class="getting-started-section loading"
        aria-labelledby="getting-started-title"
        transition:name="getting-started-section"
        data-lazy>
        <div class="getting-started-container">
          <h2
            class="getting-started-title"
            id="getting-started-title"
            transition:name="getting-started-title">
            Mulai dari Mana?
          </h2>
          <div class="getting-started-content">
            <div class="getting-started-text">
              <p>
                <strong>Untuk pemula</strong>, kami merekomendasikan mulai dengan <strong
                  >Anki</strong
                > untuk membangun fondasi kosakata, kemudian <strong>Yomichan</strong> untuk
                membantu membaca teks bahasa Jepang.
              </p>
              <p>
                <strong>Untuk tingkat menengah</strong>, eksplorasi <strong>Migaku</strong
                > dan <strong>Language Reactor</strong>
                untuk meningkatkan kemampuan listening dan comprehension.
              </p>
            </div>
            <div class="getting-started-cta">
              <a
                href="/docs"
                class="getting-started-button"
                transition:name="getting-started-button">
                Lihat Semua Dokumentasi
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  aria-hidden="true">
                  <path d="M5 12h14M12 5l7 7-7 7"></path>
                </svg>
              </a>
            </div>
          </div>
        </div>
      </section>
    </main>

    <script>
      // Enhanced Intersection Observer for lazy loading optimization
      const lazyElements = document.querySelectorAll("[data-lazy]")
      const lazyObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("loaded")
              lazyObserver.unobserve(entry.target)
            }
          })
        },
        {
          threshold: 0.1,
          rootMargin: "50px",
        }
      )

      lazyElements.forEach((el) => lazyObserver.observe(el))

      // Enhanced tool card interaction system
      document.addEventListener("DOMContentLoaded", () => {
        const toolCards = document.querySelectorAll(".tool-card")
        let isTouchDevice = "ontouchstart" in window || navigator.maxTouchPoints > 0

        toolCards.forEach((card) => {
          const cardElement = card as HTMLElement
          const link = card.querySelector(".tool-card-link") as HTMLAnchorElement
          const icon = card.querySelector(".tool-icon") as HTMLElement
          const arrow = card.querySelector(".tool-arrow") as HTMLElement

          // Enhanced click/tap feedback
          const handleInteraction = (e: Event) => {
            e.preventDefault()

            // Add visual feedback
            cardElement.style.transform = "scale(0.98)"
            cardElement.style.transition = "transform 0.1s ease"

            // Add ripple effect for touch devices
            if (isTouchDevice) {
              const ripple = document.createElement("div")
              ripple.style.position = "absolute"
              ripple.style.borderRadius = "50%"
              ripple.style.background = "rgba(255, 255, 255, 0.3)"
              ripple.style.transform = "scale(0)"
              ripple.style.animation = "ripple 0.6s ease-out"
              ripple.style.pointerEvents = "none"

              const rect = card.getBoundingClientRect()
              const size = Math.max(rect.width, rect.height)
              ripple.style.width = ripple.style.height = size + "px"
              ripple.style.left =
                (e as TouchEvent).touches?.[0]?.clientX - rect.left - size / 2 + "px"
              ripple.style.top =
                (e as TouchEvent).touches?.[0]?.clientY - rect.top - size / 2 + "px"

              card.appendChild(ripple)
              setTimeout(() => ripple.remove(), 600)
            }

            // Reset transform and navigate
            setTimeout(() => {
              cardElement.style.transform = ""
              cardElement.style.transition = ""
              if (link) {
                link.click()
              }
            }, 150)
          }

          // Enhanced hover effects for desktop
          if (!isTouchDevice) {
            card.addEventListener("mouseenter", () => {
              cardElement.style.transform = "translateY(-8px) scale(1.02)"
              if (icon) icon.style.transform = "scale(1.1)"
              if (arrow) arrow.style.transform = "translateX(4px)"
            })

            card.addEventListener("mouseleave", () => {
              cardElement.style.transform = ""
              if (icon) icon.style.transform = ""
              if (arrow) arrow.style.transform = ""
            })
          }

          // Touch/click event handling
          if (isTouchDevice) {
            card.addEventListener("touchstart", handleInteraction, { passive: false })
          } else {
            card.addEventListener("click", handleInteraction)
          }

          // Enhanced keyboard navigation
          card.addEventListener("keydown", (e) => {
            const keyEvent = e as KeyboardEvent
            if (keyEvent.key === "Enter" || keyEvent.key === " ") {
              e.preventDefault()
              handleInteraction(e)
            }
          })

          // Focus management for accessibility
          card.addEventListener("focus", () => {
            cardElement.style.outline = "3px solid var(--clr-accent)"
            cardElement.style.outlineOffset = "2px"
          })

          card.addEventListener("blur", () => {
            cardElement.style.outline = ""
            cardElement.style.outlineOffset = ""
          })
        })

        // Add ripple animation to CSS
        const style = document.createElement("style")
        style.textContent = `
          @keyframes ripple {
            to {
              transform: scale(4);
              opacity: 0;
            }
          }
        `
        document.head.appendChild(style)

        // Preload critical resources
        const preloadLinks = [
          "/docs/anki-guide",
          "/docs/yomichan-guide",
          "/docs/migaku-guide",
          "/docs/language-reactor-guide",
        ]

        preloadLinks.forEach((link) => {
          const preload = document.createElement("link")
          preload.rel = "prefetch"
          preload.href = link
          preload.setAttribute("fetchpriority", "low")
          document.head.appendChild(preload)
        })
      })
    </script>
  </body>
</html>
