---
import Head from "../components/public-components/HeadSEO.astro"
import BaseLayout from "../layouts/BaseLayout.astro"
import Navbar from "../components/public-components/Navbar.vue"

// Import CSS
import "../styles/global.css"
import "../styles/tools/tools.css"

// Import images
import homepageOgImage from "../assets/images/Logo Discord.png"

// Tools data - structured for easy management and expansion
const tools = [
  {
    id: "anki",
    name: "Anki",
    description:
      "Sistem flashcard dengan Spaced Repetition System (SRS) untuk menghafal kosakata dan kanji secara efektif.",
    icon: "üìö",
    color: "var(--clr-accent)",
    link: "/docs/anki-guide",
    difficulty: "intermediate",
    category: "flashcard",
    featured: true,
  },
  {
    id: "yomichan",
    name: "Yomichan",
    description:
      "Browser extension untuk membaca bahasa Jepang dengan hover dictionary dan furigana generation.",
    icon: "üîç",
    color: "var(--clr-accent-dark)",
    link: "/docs/yomichan-guide",
    difficulty: "beginner",
    category: "reading",
    featured: true,
  },
  {
    id: "migaku",
    name: "Migaku",
    description:
      "Suite tools untuk immersion learning termasuk browser extension dan Anki integration.",
    icon: "üéØ",
    color: "var(--clr-accent-glow-strong)",
    link: "/docs/migaku-guide",
    difficulty: "intermediate",
    category: "suite",
    featured: false,
  },
  {
    id: "language-reactor",
    name: "Language Reactor",
    description:
      "Netflix extension untuk belajar bahasa dengan subtitle dual-language dan vocabulary tracking.",
    icon: "üé¨",
    color: "var(--clr-accent-glow-medium)",
    link: "/docs/language-reactor-guide",
    difficulty: "beginner",
    category: "video",
    featured: false,
  },
]
---

<!doctype html>
<html lang="id">
  <head>
    <Head
      title="Tools Immersion - Alat Pembelajaran Bahasa Jepang"
      description="Kumpulan tools dan aplikasi terbaik untuk pembelajaran bahasa Jepang dengan metode immersion. Setup dan panduan lengkap."
      ogImage={homepageOgImage}
      pageType="website"
      publishedDate="2025/08/10"
      lang="id"
      aiPageType="docs"
      enableAIOptimizations={true}
    />
    <!-- Prefetch critical resources -->
    <link fetchpriority="low" rel="prefetch" href="/docs" />
  </head>
  <body>
    <!-- Navigation -->
    <Navbar client:visible />

    <!-- Background Animations -->
    <canvas id="waveCanvas" class="wave-canvas" aria-hidden="true"></canvas>
    <div class="stars" id="stars" aria-hidden="true"></div>

    <!-- Main Content -->
    <main class="main-content" role="main" transition:name="main-content">
      <!-- Hero Section -->
      <section
        class="tools-section loading"
        aria-labelledby="tools-title"
        transition:name="tools-hero">
        <div class="container">
          <h1
            class="tools-hero-title"
            id="tools-hero-title"
            transition:name="tools-hero-title">
            Tools Immersion
          </h1>
          <p class="tools-hero-description">
            Kumpulan tools dan aplikasi terbaik yang telah terbukti efektif untuk
            pembelajaran bahasa Jepang dengan metode immersion.
          </p>
        </div>
      </section>

      <!-- Tools Grid Section -->
      <section
        class="tools-section loading"
        aria-labelledby="tools-title"
        transition:name="tools-section"
        data-lazy>
        <div class="container">
          <div class="tools-header">
            <h1 class="tools-title" id="tools-title">Tools & Aplikasi</h1>
            <p class="tools-description">
              Pilih tool yang sesuai dengan tahap pembelajaran dan kebutuhan Anda.
            </p>
          </div>

          <!-- Semantic List for Accessibility -->
          <div class="tools-grid" role="list">
            {
              tools.map((tool) => (
                <div class="tool-grid-item">
                  <a
                    href={tool.link}
                    class="tool-card"
                    aria-labelledby={`tool-name-${tool.id}`}
                    aria-describedby={`tool-desc-${tool.id}`}>
                    <article>
                      <header class="tool-card-header">
                        <div class="tool-icon" style={`background-color: ${tool.color}`}>
                          {tool.icon}
                        </div>
                        <div class="tool-meta">
                          <span class="tool-difficulty">
                            {tool.difficulty === "beginner"
                              ? "Pemula"
                              : tool.difficulty === "intermediate"
                                ? "Menengah"
                                : "Lanjutan"}
                          </span>
                          <span class="tool-category">{tool.category}</span>
                        </div>
                      </header>
                      <div class="tool-card-body">
                        <h3 class="tool-name" id={`tool-name-${tool.id}`}>
                          {tool.name}
                        </h3>
                        <p class="tool-description-card" id={`tool-desc-${tool.id}`}>
                          {tool.description}
                        </p>
                      </div>
                      <footer class="tool-card-footer">
                        <span class="tool-cta-text">Lihat Panduan</span>
                        <svg
                          class="tool-arrow"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2.5">
                          <path d="M5 12h14M12 5l7 7-7 7" />
                        </svg>
                      </footer>
                    </article>
                  </a>
                </div>
              ))
            }
          </div>
        </div>
      </section>
    </main>

    <script>
      // Wave and Stars animation scripts remain unchanged and are omitted for brevity.
      // They are assumed to be present here as in the original file.

      // üåä DOCS PAGE WAVE ANIMATION INITIALIZATION
      // Google Engineering Team 2025: Performance-optimized wave animation for docs page

      let waveAnimation: { cleanup: () => void } | null = null
      let starsContainer: HTMLElement | null = null

      // Initialize wave animation for docs page
      function initializeDocsWaveAnimation(): (() => void) | undefined {
        console.log("üåä Initializing docs page wave animation...")

        const canvas = document.getElementById("waveCanvas")
        if (!canvas) {
          console.warn("Wave canvas not found for docs page")
          return undefined
        }

        const ctx = (canvas as HTMLCanvasElement)?.getContext("2d")
        if (!ctx) {
          console.warn("Canvas context not available for docs page")
          return undefined
        }

        let animationId: number | null = null
        let time = 0

        // Docs-specific wave configuration (optimized for content pages)
        const waves = [
          {
            amplitude: 40,
            frequency: 0.01,
            speed: 0.02,
            offset: 0,
            color: "rgba(139, 93, 255, 0.08)",
            y: 0.7,
          },
          {
            amplitude: 60,
            frequency: 0.008,
            speed: -0.015,
            offset: Math.PI / 3,
            color: "rgba(139, 93, 255, 0.06)",
            y: 0.75,
          },
          {
            amplitude: 35,
            frequency: 0.012,
            speed: 0.025,
            offset: Math.PI / 2,
            color: "rgba(139, 93, 255, 0.04)",
            y: 0.8,
            yPos: 0, // Will be set in resizeCanvas
          },
          {
            amplitude: 45,
            frequency: 0.009,
            speed: -0.018,
            offset: Math.PI,
            color: "rgba(139, 93, 255, 0.03)",
            y: 0.85,
          },
        ]

        function resizeCanvas() {
          const width = window.innerWidth
          const height = window.innerHeight
          ;(canvas as HTMLCanvasElement).width = width
          ;(canvas as HTMLCanvasElement).height = height

          // Update wave y positions based on new height
          waves.forEach((wave) => {
            wave.yPos = height * wave.y
          })
        }

        function animate() {
          if (!ctx) return

          ctx.clearRect(
            0,
            0,
            (canvas as HTMLCanvasElement).width,
            (canvas as HTMLCanvasElement).height
          )

          // Create gradient background (docs-specific)
          const gradient = ctx.createLinearGradient(
            0,
            0,
            0,
            (canvas as HTMLCanvasElement).height
          )
          gradient.addColorStop(0, "rgba(10, 10, 10, 1)")
          gradient.addColorStop(0.6, "rgba(10, 10, 10, 0.98)")
          gradient.addColorStop(1, "rgba(139, 93, 255, 0.015)")
          ctx.fillStyle = gradient
          ctx.fillRect(
            0,
            0,
            (canvas as HTMLCanvasElement).width,
            (canvas as HTMLCanvasElement).height
          )

          // Draw waves
          waves.forEach((wave) => {
            ctx.beginPath()

            // Create wave path
            for (let x = 0; x <= (canvas as HTMLCanvasElement).width + 10; x += 2) {
              const y =
                wave.yPos +
                Math.sin(x * wave.frequency + time * wave.speed + wave.offset) *
                  wave.amplitude

              if (x === 0) {
                ctx.moveTo(x, y)
              } else {
                ctx.lineTo(x, y)
              }
            }

            // Close the path to create filled area
            ctx.lineTo(
              (canvas as HTMLCanvasElement).width,
              (canvas as HTMLCanvasElement).height
            )
            ctx.lineTo(0, (canvas as HTMLCanvasElement).height)
            ctx.closePath()

            ctx.fillStyle = wave.color
            ctx.fill()

            // Add subtle stroke for more definition
            ctx.strokeStyle = "rgba(139, 93, 255, 0.08)"
            ctx.lineWidth = 0.5
            ctx.stroke()
          })

          time += 0.5
          animationId = requestAnimationFrame(animate)
        }

        // Initialize
        resizeCanvas()
        animate()

        // Handle window resize
        const handleResize = () => {
          resizeCanvas()
        }
        window.addEventListener("resize", handleResize)

        // Return cleanup function
        return () => {
          if (animationId) {
            cancelAnimationFrame(animationId)
          }
          window.removeEventListener("resize", handleResize)
        }
      }

      // Initialize wave animation when DOM is ready
      document.addEventListener("DOMContentLoaded", function () {
        try {
          waveAnimation = {
            cleanup: initializeDocsWaveAnimation() || (() => {}),
          }
          console.log("‚úÖ Docs page wave animation initialized successfully")
        } catch (error) {
          console.error("Error initializing docs page wave animation:", error)
        }
      })

      // Cleanup on page unload
      window.addEventListener("beforeunload", function () {
        if (waveAnimation) {
          waveAnimation.cleanup()
        }
      })

      // Animation Modules Integration
      window.addEventListener("load", async () => {
        try {
          // Import animation modules
          const [starsModule] = await Promise.all([
            import("../scripts/ui/background-animations/stars-animation.js"),
          ])

          // Initialize stars animation
          const starsAnimation = starsModule.initStarsAnimation({
            enabled: true,
            count: 8,
            animationDuration: "4s",
            opacity: 0.6,
            containerClass: "stars",
            starClass: "star",
            containerId: "stars",
            useExistingContainer: true,
            createContainer: false,
            containerSelector: ".stars",
            accessibility: {
              respectReducedMotion: false,
              announceChanges: false,
              screenReaderFriendly: true,
              highContrastSupport: true,
              forceEnable: true,
            },
          })

          // Initialize the animation
          starsAnimation.init("stars")

          // Add smooth fade-in for stars
          setTimeout(() => {
            const starsContainer = document.querySelector(".stars")
            if (starsContainer) {
              starsContainer.classList.add("loaded")
            }
          }, 100)

          console.log("‚úÖ Tools page animations initialized successfully")

          // Debug: Check if stars were created
          setTimeout(() => {
            const stars = document.querySelectorAll(".star")
            console.log(`üîç Debug: Found ${stars.length} stars in DOM`)
            if (stars.length > 0) {
              console.log("‚úÖ Stars are visible in DOM")
              console.log("First star element:", stars[0])
            } else {
              console.log("‚ö†Ô∏è No stars found in DOM - checking container")
              const container = document.querySelector(".stars")
              console.log("Container:", container)
              console.log("Container HTML:", container?.innerHTML)
            }
          }, 500)
        } catch (error) {
          console.error("‚ùå Error initializing tools page animations:", error)
        }
      })

      // Enhanced Intersection Observer for lazy loading (unchanged)
      const lazyElements = document.querySelectorAll("[data-lazy]")
      const lazyObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("loaded")
              lazyObserver.unobserve(entry.target)
            }
          })
        },
        { threshold: 0.1, rootMargin: "50px" }
      )
      lazyElements.forEach((el) => lazyObserver.observe(el))

      // REDESIGNED tool card interaction system
      document.addEventListener("DOMContentLoaded", () => {
        const toolCards = document.querySelectorAll(".tool-card")

        toolCards.forEach((card) => {
          // Click/Tap feedback for all devices
          card.addEventListener("click", (e) => {
            e.preventDefault()

            // Add visual feedback
            card.classList.add("is-interacting")

            // Navigate after animation
            setTimeout(() => {
              card.classList.remove("is-interacting")
              window.location.href = (card as HTMLAnchorElement).href
            }, 150)
          })

          // Keyboard navigation support
          card.addEventListener("keydown", (e) => {
            if (
              (e as KeyboardEvent).key === " " ||
              (e as KeyboardEvent).key === "Enter"
            ) {
              e.preventDefault()
              ;(card as HTMLAnchorElement).click()
            }
          })
        })

        // Preload critical resources (unchanged)
        const preloadLinks = [
          "/docs/anki-guide",
          "/docs/yomichan-guide",
          "/docs/migaku-guide",
          "/docs/language-reactor-guide",
        ]
        preloadLinks.forEach((link) => {
          const preload = document.createElement("link")
          preload.rel = "prefetch"
          preload.href = link
          preload.setAttribute("fetchpriority", "low")
          document.head.appendChild(preload)
        })
      })
    </script>
  </body>
</html>
