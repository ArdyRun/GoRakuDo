<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Post | GoRakuDo Documentation</title>
    <link is:inline rel="stylesheet" href="/GoRakuDo/css/post-styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Yuji+Syuku&family=Inter:wght@300;400;500;600;700&family=Lora:wght@400;600&family=Cedarville+Cursive&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-markup.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-javascript.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.css">
</head>
<body>
    <!-- Wave Animation Background -->
    <canvas id="waveCanvas" class="wave-canvas"></canvas>
    
    <!-- Stars Background -->
    <div class="stars">
        <div class="star" style="top: 10%; left: 20%; animation-delay: 0s;"></div>
        <div class="star" style="top: 20%; right: 20%; animation-delay: 1s;"></div>
        <div class="star" style="top: 30%; left: 80%; animation-delay: 2s;"></div>
        <div class="star" style="bottom: 30%; left: 10%; animation-delay: 1.5s;"></div>
        <div class="star" style="bottom: 20%; right: 30%; animation-delay: 0.5s;"></div>
        <div class="star" style="top: 60%; left: 15%; animation-delay: 2.5s;"></div>
        <div class="star" style="top: 80%; right: 20%; animation-delay: 1.8s;"></div>
        <div class="star" style="bottom: 40%; right: 60%; animation-delay: 0.8s;"></div>
    </div>

    <!-- Navigation -->
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-left">
                <span class="nav-item" onclick="goHome()">Beranda</span>
                <span class="nav-item" onclick="goToPosts()">Dokumentasi</span>
                <span class="nav-item">Sumber Daya</span>
                <span class="nav-item">Komunitas</span>
            </div>
            <div class="nav-center">
                <ruby class="logo-japanese" onclick="goHome()">
                    Ë™û<rt>„Åî</rt>Ê•Ω<rt>„Çâ„Åè</rt>ÈÅì<rt>„Å©„ÅÜ</rt>
                </ruby>
            </div>
            <div class="nav-right">
                <span class="nav-item" onclick="goToPosts()">Panduan</span>
                <span class="nav-item">Tools</span>
                <span class="nav-item" onclick="goToInvitation()">Gabung Discord</span>
                <button class="get-started-btn" onclick="goToPosts()">Semua Panduan</button>
            </div>
            <!-- Mobile menu button -->
            <button class="mobile-menu-btn" onclick="goToInvitation()">Join</button>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="posts-page">
        <div class="posts-container">
            <a href="/docs/posts" class="back-to-posts">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M19 12H5M12 19l-7-7 7-7"/>
                </svg>
                Kembali ke Dokumentasi
            </a>
            
            <div class="post-content" id="postContent">
                <!-- Post content will be dynamically loaded here -->
            </div>

            <!-- Navigation to other posts -->
            <div style="text-align: center; margin-top: 60px; padding-top: 40px; border-top: 1px solid rgba(139, 93, 255, 0.1);">
                <button class="docs-button" onclick="goToPosts()">
                    Lihat Semua Panduan
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M5 12h14M12 5l7 7-7 7"/>
                    </svg>
                </button>
            </div>
        </div>
    </main>

    <script is:inline src="/GoRakuDo/scripts/post-script.js"></script>
    <script>
        // Navigation functions
        function goHome() {
            window.location.href = '/';
        }

        function goToPosts() {
            window.location.href = '/docs/posts';
        }

        function goToInvitation() {
            window.location.href = '/discord';
        }

        // Configure marked for better markdown rendering
        marked.setOptions({
            highlight: function(code, lang) {
                if (Prism.languages[lang]) {
                    return Prism.highlight(code, Prism.languages[lang], lang);
                } else {
                    return code;
                }
            },
            breaks: true,
            gfm: true
        });

        // Function to load and render post
        function loadPost() {
            // Get post data from sessionStorage
            const postData = sessionStorage.getItem('currentPost');
            
            if (postData) {
                const post = JSON.parse(postData);
                renderPost(post);
            } else {
                // Fallback - try to get post ID from URL
                const urlParams = new URLSearchParams(window.location.search);
                const postId = urlParams.get('id');
                
                if (postId) {
                    // In a real implementation, you would fetch the post data from your API/GitHub
                    // For now, redirect back to posts page
                    window.location.href = '/docs/posts';
                } else {
                    // No post data available, redirect to posts
                    window.location.href = '/post/posts';
                }
            }
        }

        // Function to render post content
        function renderPost(post) {
            const postContent = document.getElementById('postContent');
            
            // Update page title
            document.title = `${post.title} | GoRakuDo Documentation`;
            
            // Parse markdown content
            const htmlContent = marked.parse(post.content);
            
            // Add post metadata and content
            postContent.innerHTML = `
                <div class="post-header" style="margin-bottom: 40px; padding-bottom: 20px; border-bottom: 1px solid rgba(139, 93, 255, 0.1);">
                    <h1 style="margin-bottom: 10px;">${post.title}</h1>
                    <div style="display: flex; gap: 20px; color: #999; font-size: 14px;">
                        <span>üìÖ ${formatDate(post.date)}</span>
                        <span>‚è±Ô∏è ${post.readTime}</span>
                    </div>
                </div>
                <div class="markdown-content">
                    ${htmlContent}
                </div>
            `;

            // Apply syntax highlighting to any code blocks that were rendered
            Prism.highlightAll();
        }

        // Function to format date
        function formatDate(dateString) {
            const options = { year: 'numeric', month: 'long', day: 'numeric' };
            return new Date(dateString).toLocaleDateString('id-ID', options);
        }

        // Enhanced scroll animations for post content
        function setupPostAnimations() {
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver(function(entries) {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                    }
                });
            }, observerOptions);

            // Animate post content elements
            const contentElements = document.querySelectorAll('.post-content h1, .post-content h2, .post-content h3, .post-content p, .post-content ul, .post-content blockquote, .post-content pre');
            contentElements.forEach((el, index) => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(20px)';
                el.style.transition = `opacity 0.6s ease ${index * 0.05}s, transform 0.6s ease ${index * 0.05}s`;
                observer.observe(el);
            });
        }

        // Initialize post when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadPost();
            
            // Setup animations after content is loaded
            setTimeout(() => {
                setupPostAnimations();
            }, 100);
        });

        // Clean up sessionStorage when leaving the page
        window.addEventListener('beforeunload', function() {
            // Only clean up if we're navigating away from post pages
            if (!window.location.href.includes('/docs/post')) {
                sessionStorage.removeItem('currentPost');
            }
        });
    </script>

    <style>
        /* Additional styles for markdown content */
        .markdown-content {
            animation: fadeInUp 0.8s ease-out;
        }

        .markdown-content h1,
        .markdown-content h2,
        .markdown-content h3 {
            position: relative;
        }

        .markdown-content h2:before {
            content: '';
            position: absolute;
            left: -20px;
            top: 50%;
            width: 4px;
            height: 20px;
            background: linear-gradient(135deg, #8B5DFF, #7B4DEF);
            transform: translateY(-50%);
            border-radius: 2px;
        }

        .markdown-content blockquote {
            position: relative;
            background: rgba(139, 93, 255, 0.05);
            border-radius: 8px;
            padding: 20px;
        }

        .markdown-content code {
            font-size: 0.9em;
        }

        .markdown-content pre {
            position: relative;
            overflow-x: auto;
        }

        .markdown-content pre:before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #8B5DFF, #7B4DEF);
            border-radius: 8px 8px 0 0;
        }

        .markdown-content ul li:before {
            content: '‚Üí';
            color: #8B5DFF;
            font-weight: bold;
            position: absolute;
            left: -20px;
        }

        .markdown-content ul li {
            position: relative;
            padding-left: 5px;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Mobile responsiveness for post content */
        @media (max-width: 768px) {
            .post-content {
                padding: 0 20px;
            }
            
            .markdown-content h2:before {
                left: -15px;
                width: 3px;
                height: 15px;
            }
        }
    </style>
</body>
</html>