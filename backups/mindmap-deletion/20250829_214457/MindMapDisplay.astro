---
import type { MindMapBranch, MindMapConnection } from "./mind-map-config";
import { MIND_MAP_CONFIG, MindMapUtils } from "./mind-map-config";

// Get mind map data
const branches = MindMapUtils.getBranches();
const connections = MIND_MAP_CONFIG.connections;

// Validate configuration
const validation = MindMapUtils.validate();
---

<div class="mind-map-display">
  <!-- Mind Map Header -->
  <div class="mind-map-header">
    <h2 class="mind-map-title">
      <span class="title-icon">üß†</span>
      {MIND_MAP_CONFIG.title}
    </h2>
    <p class="mind-map-description">{MIND_MAP_CONFIG.description}</p>

    {
      !validation.isValid && (
        <div class="validation-errors">
          <h3>‚ö†Ô∏è Configuration Errors:</h3>
          <ul>
            {validation.errors.map((error) => (
              <li>{error}</li>
            ))}
          </ul>
        </div>
      )
    }
  </div>

  <!-- Mind Map Branches -->
  <div class="mind-map-branches">
    {
      branches.map((branch) => (
        <div
          class="mind-map-branch"
          style={`--branch-color: ${branch.visual.color}; --branch-bg: ${branch.visual.backgroundColor}`}>
          <div class="branch-header">
            <div
              class="branch-icon"
              style={`background: ${branch.visual.gradient}`}>
              {branch.visual.icon}
            </div>
            <div class="branch-info">
              <h3 class="branch-title">{branch.displayName}</h3>
              <p class="branch-description">{branch.description}</p>
            </div>
          </div>

          <div class="branch-content">
            <div class="branch-keywords">
              <h4>Keywords:</h4>
              <div class="keyword-list">
                {branch.keywords.map((keyword) => (
                  <span class="keyword-tag">{keyword}</span>
                ))}
              </div>
            </div>

            <div class="branch-meta">
              <div class="meta-item">
                <span class="meta-label">Difficulty:</span>
                <span class="meta-value difficulty-{branch.content.difficulty}">
                  {branch.content.difficulty}
                </span>
              </div>
              <div class="meta-item">
                <span class="meta-label">Type:</span>
                <span class="meta-value type-{branch.content.type}">
                  {branch.content.type}
                </span>
              </div>
            </div>

            <div class="branch-connections">
              <h4>Connections:</h4>
              {MindMapUtils.getBranchConnections(branch.id).map(
                (connection) => {
                  const targetId =
                    connection.from === branch.id
                      ? connection.to
                      : connection.from;
                  const targetBranch = MindMapUtils.getBranch(targetId);
                  return targetBranch ? (
                    <div class="connection-item">
                      <span class="connection-type {connection.type}">
                        {connection.type}
                      </span>
                      <span class="connection-target">
                        {targetBranch.displayName}
                      </span>
                      <span class="connection-description">
                        {connection.description}
                      </span>
                    </div>
                  ) : null;
                }
              )}
            </div>
          </div>
        </div>
      ))
    }
  </div>

  <!-- Mind Map Connections Overview -->
  <div class="mind-map-connections">
    <h3>Connection Overview</h3>
    <div class="connections-grid">
      {
        connections.map((connection) => {
          const fromBranch = MindMapUtils.getBranch(connection.from);
          const toBranch = MindMapUtils.getBranch(connection.to);
          return fromBranch && toBranch ? (
            <div class="connection-card {connection.type}">
              <div class="connection-header">
                <span class="connection-icon">üîó</span>
                <span class="connection-type-label">{connection.type}</span>
              </div>
              <div class="connection-branches">
                <span class="branch-from">{fromBranch.displayName}</span>
                <span class="connection-arrow">‚Üí</span>
                <span class="branch-to">{toBranch.displayName}</span>
              </div>
              <p class="connection-description">{connection.description}</p>
            </div>
          ) : null;
        })
      }
    </div>
  </div>

  <!-- Edit Instructions -->
  <div class="edit-instructions">
    <h3>üìù How to Edit This Mind Map</h3>
    <div class="instructions-content">
      <p>
        This mind map is configured using a simple text file. To customize it:
      </p>
      <ol>
        <li>
          Open <code>src/components/mind-map/mind-map-config.ts</code> in your text
          editor
        </li>
        <li>
          Edit the branch properties (name, description, keywords, colors,
          icons)
        </li>
        <li>Modify connections between branches</li>
        <li>Save the file and rebuild the site</li>
      </ol>
      <p>
        <strong>No complex UI needed!</strong> Just edit the configuration file and
        the mind map will update automatically.
      </p>
    </div>
  </div>
</div>

<style>
  .mind-map-display {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    background: var(--color-background);
    color: var(--color-text-primary);
  }

  .mind-map-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .mind-map-title {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: var(--color-text-primary);
  }

  .title-icon {
    font-size: 3rem;
  }

  .mind-map-description {
    font-size: 1.125rem;
    color: var(--color-text-secondary);
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.6;
  }

  .validation-errors {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.3);
    border-radius: var(--radius-md);
    padding: 1rem;
    margin-top: 1rem;
    text-align: left;
  }

  .validation-errors h3 {
    color: #ef4444;
    margin-bottom: 0.5rem;
  }

  .validation-errors ul {
    margin: 0;
    padding-left: 1.5rem;
  }

  .validation-errors li {
    color: var(--color-text-secondary);
    margin-bottom: 0.25rem;
  }

  .mind-map-branches {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .mind-map-branch {
    background: rgba(255, 255, 255, 0.05);
    border: 2px solid var(--branch-color);
    border-radius: var(--radius-lg);
    padding: 1.5rem;
    transition: all 0.3s ease;
  }

  .mind-map-branch:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .branch-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .branch-icon {
    width: 60px;
    height: 60px;
    border-radius: var(--radius-lg);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2rem;
    flex-shrink: 0;
  }

  .branch-info {
    flex: 1;
  }

  .branch-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--color-text-primary);
  }

  .branch-description {
    color: var(--color-text-secondary);
    line-height: 1.5;
  }

  .branch-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .branch-keywords h4,
  .branch-connections h4 {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--color-text-primary);
  }

  .keyword-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .keyword-tag {
    background: var(--branch-bg);
    color: var(--branch-color);
    padding: 0.25rem 0.75rem;
    border-radius: var(--radius-sm);
    font-size: 0.875rem;
    font-weight: 500;
    border: 1px solid var(--branch-color);
  }

  .branch-meta {
    display: flex;
    gap: 1rem;
  }

  .meta-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .meta-label {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
    text-transform: uppercase;
    font-weight: 500;
  }

  .meta-value {
    font-size: 0.875rem;
    font-weight: 600;
    padding: 0.25rem 0.5rem;
    border-radius: var(--radius-sm);
    text-transform: capitalize;
  }

  .difficulty-beginner {
    background: rgba(16, 185, 129, 0.2);
    color: #10b981;
  }

  .difficulty-intermediate {
    background: rgba(245, 158, 11, 0.2);
    color: #f59e0b;
  }

  .difficulty-advanced {
    background: rgba(239, 68, 68, 0.2);
    color: #ef4444;
  }

  .type-guide {
    background: rgba(59, 130, 246, 0.2);
    color: #3b82f6;
  }

  .type-tutorial {
    background: rgba(139, 92, 246, 0.2);
    color: #8b5cf6;
  }

  .type-theory {
    background: rgba(16, 185, 129, 0.2);
    color: #10b981;
  }

  .type-practice {
    background: rgba(239, 68, 68, 0.2);
    color: #ef4444;
  }

  .type-tool {
    background: rgba(245, 158, 11, 0.2);
    color: #f59e0b;
  }

  .type-review {
    background: rgba(107, 114, 128, 0.2);
    color: #6b7280;
  }

  .branch-connections {
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding-top: 1rem;
  }

  .connection-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    padding: 0.5rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: var(--radius-sm);
  }

  .connection-type {
    font-size: 0.75rem;
    font-weight: 600;
    padding: 0.125rem 0.5rem;
    border-radius: var(--radius-sm);
    text-transform: capitalize;
  }

  .connection-type.progression {
    background: rgba(16, 185, 129, 0.2);
    color: #10b981;
  }

  .connection-type.related {
    background: rgba(59, 130, 246, 0.2);
    color: #3b82f6;
  }

  .connection-type.complementary {
    background: rgba(139, 92, 246, 0.2);
    color: #8b5cf6;
  }

  .connection-target {
    font-weight: 500;
    color: var(--color-text-primary);
  }

  .connection-description {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    margin-left: auto;
  }

  .mind-map-connections {
    margin-bottom: 3rem;
  }

  .mind-map-connections h3 {
    font-size: 2rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    text-align: center;
    color: var(--color-text-primary);
  }

  .connections-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .connection-card {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-lg);
    padding: 1.5rem;
    transition: all 0.3s ease;
  }

  .connection-card:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: translateY(-2px);
  }

  .connection-card.progression {
    border-color: rgba(16, 185, 129, 0.3);
  }

  .connection-card.related {
    border-color: rgba(59, 130, 246, 0.3);
  }

  .connection-card.complementary {
    border-color: rgba(139, 92, 246, 0.3);
  }

  .connection-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .connection-icon {
    font-size: 1.25rem;
  }

  .connection-type-label {
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: capitalize;
  }

  .connection-branches {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.75rem;
    font-weight: 500;
  }

  .connection-arrow {
    color: var(--color-text-secondary);
    font-weight: bold;
  }

  .connection-description {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    line-height: 1.5;
  }

  .edit-instructions {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-lg);
    padding: 2rem;
  }

  .edit-instructions h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--color-text-primary);
  }

  .instructions-content p {
    color: var(--color-text-secondary);
    margin-bottom: 1rem;
    line-height: 1.6;
  }

  .instructions-content ol {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .instructions-content li {
    color: var(--color-text-secondary);
    margin-bottom: 0.5rem;
    line-height: 1.5;
  }

  .instructions-content code {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.125rem 0.375rem;
    border-radius: var(--radius-sm);
    font-family: "Monaco", "Menlo", "Ubuntu Mono", monospace;
    font-size: 0.875rem;
  }

  @media (max-width: 768px) {
    .mind-map-display {
      padding: 1rem;
    }

    .mind-map-title {
      font-size: 2rem;
      flex-direction: column;
      gap: 0.5rem;
    }

    .title-icon {
      font-size: 2.5rem;
    }

    .mind-map-branches {
      grid-template-columns: 1fr;
    }

    .branch-header {
      flex-direction: column;
      text-align: center;
    }

    .branch-meta {
      flex-direction: column;
      gap: 0.5rem;
    }

    .connections-grid {
      grid-template-columns: 1fr;
    }

    .connection-branches {
      flex-direction: column;
      gap: 0.25rem;
    }
  }
</style>
